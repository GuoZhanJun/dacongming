#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//数组-指针一些经典面试题
//1.sizeof(数组名）-数组名表示整个数组
//2.&数组名-数组名表示整个数组
//3.其余所有情况都是首元素地址
//eg:整型数组
int main()
{
	int a[] = { 1,2,3,4 };//4*4=16
	printf("%d\n", sizeof(a));//16 sizeof(数组名）-计算的是数组总大小-单位是字节-16
	printf("%d\n", sizeof(a + 0));//4（32位平台）/8(64平台)-首元素地址a+0还是首元素地址-4
	printf("%d\n", sizeof(*a));//4-首元素地址-*a就是首元素
	printf("%d\n", sizeof(a+1));//4（32位平台）/8(64位平台)-首元素地址a+1第二个元素地址，地址大小-4
	printf("%d\n", sizeof(a[1]));//4-第二个元素大小
	printf("%d\n", sizeof(&a));//4/8 &a取出的是数组的地址，但是数组的地址也是地址，地址的大小就是4/8个字节
	printf("%d\n", sizeof(*&a));//16-&a数组的地址，数组的地址解引用访问的数组，sizeof计算的是数组的大小，单位是字节
	printf("%d\n", sizeof(&a+1));//4/8 &a是数组的地址，&a+1虽然地址跳过整个数组，但还是地址，所以是4/8个字节
	printf("%d\n", sizeof(&a[0]));//4/8 第一个元素的地址
	printf("%d\n", sizeof(&a[0]+1));//4/8 第二个元素的地址

//eg:字符数组
char arr[] = { 'a','b','c','d','e','f' };
printf("%d\n",sizeof(arr));//6-sizeof计算的是数组大小，6*1=6
printf("%d\n",sizeof(arr+0));//4/8 arr是首元素的地址，arr+0还是首元素的地址，地址的大小是4/8
printf("%d\n", sizeof(*arr));//1 arr是首元素地址，*arr是首元素-1
printf("%d\n", sizeof(arr[1]));//1 第二个元素
printf("%d\n", sizeof(&arr));//4/8 &arr 虽然是数组的地址，但还是地址，地址大小4/8
printf("%d\n", sizeof(&arr+1));//4  &arr是跳过整个数组后的地址
printf("%d\n", sizeof(&arr[0]+1));//1 第二个元素的地址




//eg:
char arr[] = { 'a','b','c','d','e','f' };
printf("%d\n", strlen(arr));//随机值，不确定\n的位置
printf("%d\n", strlen(arr + 0));//随机值
printf("%d\n", strlen(*arr));//err
printf("%d\n", strlen(arr[1]));//err
printf("%d\n", strlen(&arr));//随机
printf("%d\n", strlen(&arr + 1));//随机值-6
printf("%d\n", strlen(&arr[0] + 1));//随机值-1
return 0;
}
