#define _CRT_SECURE_NO_WARNINGS 1
#include<stdlib.h>
#include<stdio.h>
#include<Windows.h>



//int main()
//{
	//int* p = (int*)malloc(40);
	//if (p == NULL)
	//{
	//	return 0;
	//}
	//for (int i = 0; i < 10; i++)
	//{
	//	*(p + i) = i;
	//}
	////回收空间--err
	////使用free释放动态开辟内存的一部分
	//free(p);
	//p = NULL;



	//对同一块动态内存多次释放
	//int* p = (int*)malloc(40);
	//if (p = NULL)
	//{
	//	return 0;
	//}
	////使用
	////释放
	//free(p);
	//p = NULL;//可以防止多次free错误
	////....
	//free(p);




	//对动态开辟内存忘记释放(内存泄露）
//	while (1)
//	{
//		malloc(1);
//		Sleep(1000);
//	}
//	return 0;
//}


//动态开辟内存面试题
//void GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(str);
//	strcpy(str, "hello world");//程序崩溃
//	printf(str);
//}
////1.程序出现崩溃
////2.程序存在内存泄露的问题（str以值传递的形式给p，p是GetMemory函数的形参，只能在函数内部有效，等GetMemory函数返回后，
////动态开辟的内存尚未释放，并且无法找到，所以会造成内存泄露)
//int main()
//{
//	Test();
//	return 0;
//}
//
////正确方式1
//void GetMemory(char **p)
//{
//	*p = (char*)malloc(100);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(&str);
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);
//	str = NULL;
//}
//int main()
//{
//	Test();
//	return 0;
//}
//
//
////正确方式2
//char* GetMemory(char* p)
//{
//	p = (char*)malloc(100);
//	return p;
//}
//void Test(void)
//{
//	char *str = NULL;
//	str = GetMemory(str);
//	strcpy(str, "hello world");
//	printf(str);
//	free(str);
//	str = NULL;
//}
//int main()
//{
//	Test();
//	return 0;
//}


//返回栈空间地址的问题
//1.
//char *GetMemory(void)
//{
//	char p[] = "hello world";//err
//	return p;
//}
//void Test(void)
//{
//	char *str = NULL;
//	str = GetMemory();
//	printf(str);
//}
//int main()
//{
//	Test();
//	return 0;
//}
//2.
//int* test()
//{
//	static int a = 10;//可以延长a的生命周期不被销毁--此时a在静态区
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}
//
////3.
//int* test()
//{
//	int* ptr = malloc(100);//堆区--可以通过
//	return ptr;
//}
//int main()
//{
//	int* p = test();
//	return 0;
//}


//运行结果会怎么样
//void GetMemory(char **p,int num)
//{
//	*p = (char*)malloc(num);
//}
//void Test(void)
//{
//	char* str = NULL;
//	GetMemory(&str,100);
//	strcpy(str, "hello");
//	printf(str);
////没有释放动态开辟的空间内存导致内存泄露
//}
//int main()
//{
//	Test();
//	return 0;
//}



//结果如何
void Test(void)
{
	char* str = (char*)malloc(100);
	strcpy(str, "hello");
	free(str);//str变成野指针
	//str=NULL;
	if (str != NULL)
		//if (str = NULL)--改正
	{
		strcpy(str, "world");//非法访问内存
		printf(str);
	}
}
int main()
{
	Test();
	return 0;
}
