//杨氏矩阵
//有一个数字矩阵，矩阵的每行从左到右是递增的，
//矩阵从上到下是递增的，请编写程序在这样的矩阵中查找某个数字是否存在
//要求：时间复杂度小于O（N）;
//1..
#include<stdio.h>
int FindNum(int arr[3][3], int k, int row, int col)
{
	//先定义右上角的元素
	int x = 0;
	int y = col - 1;//右上角元素的坐标（0.2）
	while (x<=row-1&&y>=0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			return 1;
		}
}
}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 8;
	int ret=FindNum(arr, k,3, 3);
	if (ret == 1)
	{
		printf("找到了");
	}
	else
	{
		printf("找不到");
	}
	return 0;
}



//进阶版--带下标
//2..--标注下标
int FindNum(int arr[3][3], int k, int *px, int *py)
{
	//先定义右上角的元素
	int x = 0;
	int y = *px - 1;//右上角元素的坐标（0.2）
	while (x <= *px - 1 && y >= 0)
	{
		if (arr[x][y] > k)
		{
			y--;
		}
		else if (arr[x][y] < k)
		{
			x++;
		}
		else
		{
			*px = x;
			*py = y;
			return 1;
		}
	}
	//找不到

	return 0;
}
int main()
{
	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
	int k = 8;
	int x = 3;
	int y = 3;
	//返回型参数
	int ret = FindNum(arr, k, &x, &y);
	if (ret == 1)
	{
		printf("找到了\n");
		printf("下标是 %d %d", x, y);
	}
	else
	{
		printf("找不到");
	}
	return 0;
}
