#define _CRT_SECURE_NO_WARNINGS 1
int main()
{
	char arr[] = "abcdef";
	printf("%d\n", sizeof(arr));//7 sizeof(arr)计算的数组的大小，单位是字节
	printf("%d\n", sizeof(arr+0));//4/8 计算的是地址的大小-arr+0是首元素地址
	printf("%d\n", sizeof(*arr));//1 *arr是首元素，sizeof（*arr)计算首元素的大小
	printf("%d\n", sizeof(arr[1]));//1第二个元素
	printf("%d\n", sizeof(&arr));//4/8 &arr虽然是数组的地址，也是地址，4/8
	printf("%d\n", sizeof(&arr+1));//4/8
	printf("%d\n", sizeof(&arr[0]+1));//4/8 第二个元素的地址


	printf("%d\n", strlen(arr));//6
	printf("%d\n", strlen(arr+0));//6
	printf("%d\n", strlen(*arr));//err
	printf("%d\n", strlen(arr[1]));//err
	printf("%d\n", strlen(&arr));//6 &arr-数组的地址-数组指针
	printf("%d\n", strlen(&arr+1));//随机
	printf("%d\n", strlen(&arr[0]+1));//从第二个元素往后数--5个元素

	char* p = "abcdef";
	printf("%d\n", sizeof(p));//4/8计算指针变量p的大小
	printf("%d\n", sizeof(p+1));//4/8 p+1计算的是b的地址--地址都是4/8
	printf("%d\n", sizeof(*p));//1 *p就是第一个字符--a
	printf("%d\n", sizeof(p[0]));//1  p[0]==*(p+0)=='a'
	printf("%d\n", sizeof(&p));//4/8
	printf("%d\n", sizeof(&p + 1));//4/8
	printf("%d\n", sizeof(&p[0] + 1));//4/8取得是b的地址  


	char* p = "abcdef";
	printf("%d\n", strlen(p));//6
	printf("%d\n", strlen(p + 1));//5
	printf("%d\n", strlen(*p));//err
	printf("%d\n", strlen(p[0]));//err
	printf("%d\n", strlen(&p));//随机  p里存放的是a的地址
	printf("%d\n", strlen(&p + 1));//随机
	printf("%d\n", strlen(&p[0] + 1));//5

	//二维数组
	int a[3][4] = { 0 };
	printf("%d\n", sizeof(a));//48
	printf("%d\n", sizeof(a[0][0]));//4
	printf("%d\n", sizeof(a[0]));//16  a[0]相当于第一行作为一维数组的数组名
	printf("%d\n", sizeof(a[0]+1));//4 a[0]是第一行的数组名，数组名此时是首元素
	//的地址，其实就是第一行第一个元素的地址,而a[0]+1是第一行的第二个元素的地址
	printf("%d\n", sizeof(*(a[0] + 1)));//4
	printf("%d\n", sizeof(a+1));//4 a是二维数组的数组名，没有sizeof（a）也没有&（a)，所以a是首元素地址
	//而把二维数组看成一维数组时，二维数组的首元素是他的第一行，a就是第一行（首元素）的地址
	//a+1就是第二行的地址
	printf("%d\n", sizeof(*(a+1)));//16
	printf("%d\n", sizeof(&a[0] + 1));//4 第二行的地址
	printf("%d\n", sizeof(*(&a[0] + 1)));//16 计算第二行的大小 单位是字节
	printf("%d\n", sizeof(*a));//16 a是首元素地址（第一行的地址，*a就是第一行）
	printf("%d\n", sizeof(a[3]));//a[3]==a[0] --16
	return 0;
}
