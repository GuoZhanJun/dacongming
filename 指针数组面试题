#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
//指针数组面试题
int main()
{
	char arr[] = "abcdef";
	printf("%d\n", sizeof(arr));//7 sizeof(arr)计算的是数组的大小，单位是字节
	printf("%d\n", sizeof(arr+0));//4\8计算的是地址的大小-arr+0是首元素地址
	printf("%d\n", sizeof(*arr));//1*arr是首元素
	printf("%d\n", sizeof(arr[1]));//1-arr[1]是第二个元素
	printf("%d\n", sizeof(&arr));//4\8 &arr数组的地址
	printf("%d\n", sizeof(&arr+1));//4\8
	printf("%d\n", sizeof(&arr[0]+1));//4 此时指向的是第二个元素的地址，是地址就是4\8


	char arr[] = "abcdef";
	printf("%d\n", strlen(arr));//6--/0之前的算是有效值，若是{'a','b','c','d','e','f'}则大小为随机值
	printf("%d\n", strlen(arr + 0));//6
	printf("%d\n", strlen(*arr));//err传的是a
	printf("%d\n", strlen(arr[1]));//err-传的是b
	printf("%d\n", strlen(&arr));//6
	printf("%d\n", strlen(&arr + 1));//随机
	printf("%d\n", strlen(&arr[0] + 1));//5


	//指针数组面试题
	int main()
	{
		char arr[] = "abcdef";
		printf("%d\n", sizeof(arr));//7 sizeof(arr)计算的是数组的大小，单位是字节
		printf("%d\n", sizeof(arr + 0));//4\8计算的是地址的大小-arr+0是首元素地址
		printf("%d\n", sizeof(*arr));//1*arr是首元素
		printf("%d\n", sizeof(arr[1]));//1-arr[1]是第二个元素
		printf("%d\n", sizeof(&arr));//4\8 &arr数组的地址
		printf("%d\n", sizeof(&arr + 1));//4\8
		printf("%d\n", sizeof(&arr[0] + 1));//4 此时指向的是第二个元素的地址，是地址就是4\8



		//*p

		char *p = "abcdef";
		printf("%d\n", sizeof(p));//4-计算指针变量p的大小
		printf("%d\n", sizeof(p+1));//4\8 p+1 得到的是字符b的地址
		printf("%d\n", sizeof(*p));//1--a
		printf("%d\n", sizeof(p[0]));//1-p[0]==*(p+0)==a-取出的是a
		printf("%d\n", sizeof(&p));//4\8
		printf("%d\n", sizeof(&p + 1));//4\8
		printf("%d\n", sizeof(&p[0] + 1));//4\8--取出的是b的地址

		char* p = "abcdef";
		printf("%d\n", strlen(p));//6 p里面存的是a的地址
		printf("%d\n", strlen(p + 1));//5 b的地址往后数
		printf("%d\n", strlen(*p));//err
		printf("%d\n", strlen(p[0]));//err
		printf("%d\n", strlen(&p));//随机值
		printf("%d\n", strlen(&p + 1));//随机值
		printf("%d\n", strlen(&p[0] + 1));//5

		//二维数组
		int a[3][4] = { 0 };
		printf("%d\n", sizeof(a));//48 
		printf("%d\n", sizeof(a[0][0]));//4
		printf("%d\n", sizeof(a[0]));//16--计算第一行数组的大小
		printf("%d\n", sizeof(a[0]+1));//4-第一行第二个元素的地址
		printf("%d\n", sizeof(*(a[0]+1)));//4-第一行第二个元素
		printf("%d\n", sizeof(a+1));//4-a是二维数组的数组名，没有sizeof(数组名),也没有
		//&（a），所以a是首元素地址，而把二维数组看成一维数组时，二维数组的首元素是他的
		//第一行,a就是第一行（首元素）的地址
		printf("%d\n", sizeof(*(a+1)));//16-相当于计算第二行的大小
		printf("%d\n", sizeof(&a[0]+1));//4  第二行的地址
		printf("%d\n", sizeof(*(&a[0]+1)));//16-计算第二行的大小
		printf("%d\n", sizeof(*a));//16 a是首元素地址-第一行地址，*a就是第一行
		printf("%d\n", sizeof(a[3]));//16




		//指针笔试题
		return 0;
	}
	return 0;
}
