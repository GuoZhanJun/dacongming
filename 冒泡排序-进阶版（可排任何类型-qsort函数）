#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>//-qsort头文件
#include<string.h>//strcmp头文件
//冒泡排序
void bubble_sort(int arr[], int sz)
{//趟数
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{//一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz - 1 - i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
			}
		}
	}
}
struct Stu
{
	char name[20];
	int age;
};
int cmp_int(const void* e1, const void* e2)
{
	//比较两个整型值
	return*(int*)e1-* (int*)e2;//强制类型转换后变为整型的地址
}
void test1()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++)
	{
		printf(" %d", arr[i]);
	}
}
int cmp_float(const void* e1, const void* e2)
{
      /* if( *(float*)e1 == *(float*)e2);
          return 0;
       else if (*(float*)e1 > *(float*)e2);
          return 1;
       else (*(float*)e1 < *(float*)e2);*/
	//return -1;
	return((int)*(float*)e1 - *(float*)e2);

}
void test2()
{
	float f[] = { 9.0,8.0,7.0,6.0,5.0,4.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f,sz,sizeof(f[0]),cmp_float);
	int j = 0;
	for (j = 0; j < sz; j++)
	{
		printf(" %f", f[j]);
	}
}
int cmp_stu_by_age(const void* e1, const void* e2)
{
	return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;

}
int cmp_stu_by_name(const void* e1, const void* e2)
{
	//比较名字就是比较字符串
	//字符串比较不能直接用> <来比较，应该用strcmp函数
	return strcmp(((struct Stu*)e1)->name , ((struct Stu*)e2)->name);
}
void test3()
{
	struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);
}
int main()
{
	//
	//float f[] = { 9.0,8.0,7.0,6.0,5.0,4.0 };
	
	//bubble_sort(arr,sz);//传参数名和大小--但是只能排整型，不能排其它类型
	//test1();
	/*test2();*/
	test3();
	return 0;
}
//
////qsort -库函数-排序
////quick sort-快速排序
////void*类型的指针可以接受任意类型的地址
////void*类型的指针 不能进行解引用操作
////void*类型的指针 不能进行+-整数的操作





//qsort的用法
//eg:qsort(s, sz, sizeof(s[0]), cmp_stu_by_name);
//第一个参数：待排序数组的首元素地址
//第二个参数：待排序数组的元素个数
//第三个参数：待排序数组的每个元素的大小-单位是字节
//第四个参数：是函数指针，比较两个元素所用函数的地址-这个函数使用者自己实现
//           函数指针的两个参数是：待比较的两个元素的地址
