//实现一个函数，可以左旋字符串中的k个字符
//eg:ABCD左旋一个字符得到BCDA
//ABCD左旋两个字符得到CDAB
//旋转字符串
// 
// 暴力求解法--1
//#include <assert.h>
//void left_move(char *arr, int k)
//{
//	assert(arr);
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//		//左旋转一个字符
//		//1
//		char tmp = *arr;
//		int j = 0;
//		for (j = 0; j < len - 1; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		//3
//		*(arr + len - 1) = tmp;
//	}
//}


//2.三步翻转法
//#include<assert.h>
//void reverse(char* left, char* right)
//{
//	assert(left!=NULL);
//	assert(right!=NULL);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//
//}
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k<= len);
//	reverse(arr,arr+k-1);//逆序左边
//	reverse(arr+k,arr+len-1);//逆序右边
//	reverse(arr,arr+len-1);//逆序整体
//}
//
//int main()
//{
//	char arr[] = "abcdef";
//	left_move(arr, 5);
//	printf("%s\n", arr);
//	return 0;
//}



//写一个函数，判断一个字符是否为另一个字符旋转之后的字符串
//eg：给定s1=AABCD和s2=BCDAA,返回1，给定s1=abcd和s2=ACBD，返回0
//AABCD左旋转一个字符得到ABCDA
//AABCD左旋转两个字符得到BCDAA
//AABCD右旋转一个字符得到DAABC


//1...
//#include<assert.h>
//void reverse(char* left, char* right)
//{
//	assert(left != NULL);
//	assert(right != NULL);
//	while (left < right)
//	{
//		char tmp = *left;
//		*left = *right;
//		*right = tmp;
//		left++;
//		right--;
//	}
//
//}
//void left_move(char* arr, int k)
//{
//	assert(arr);
//	int len = strlen(arr);
//	assert(k <= len);
//	reverse(arr, arr + k - 1);//逆序左边
//	reverse(arr + k, arr + len - 1);//逆序右边
//	reverse(arr,arr + len - 1);//逆序整体
//}
//int is_left_move(char*s1,char*s2)
//{
//	int len = strlen(s1);
//	int i = 0;
//	for (i = 0; i < len; i++)
//	{
//		left_move(s1, 1);
//		int ret=strcmp(s1, s2);//比较两个字符串是否相等
//		if (ret == 0)
//			return 1;
//	}
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "cdefab";
//	int ret=is_left_move(arr1, arr2);
//	if (ret == 1)
//		printf("YES\n");
//	else
//		printf("NO\n");
//	return 0;
//}
